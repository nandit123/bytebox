<!DOCTYPE html>
<html>

<head>
    <title>Byte Box</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.css">
    <link rel="stylesheet" href="dist/css/bootstrap-navbar-dropdowns.css">
    <script src="https://code.jquery.com/jquery-3.4.1.slim.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.js" defer></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.js" defer></script>
    <script src="dist/js/bootstrap-navbar-dropdowns.js" defer></script>
</head>

<body>

    <div class="navbar navbar-expand-md navbar-dark bg-dark mb-4" role="navigation">
        <strong><a class="navbar-brand" href="#">Byte Box</a></strong>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarCollapse"
            aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Home
                        <span class="sr-only">(current)</span>
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="http://fontenele.github.io/bootstrap-navbar-dropdowns/"
                        target="_blank">Github</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link disabled" href="#">Disabled</a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="dropdown1" data-toggle="dropdown" aria-haspopup="true"
                        aria-expanded="false">Dropdown1</a>
                    <ul class="dropdown-menu" aria-labelledby="dropdown1">
                        <li class="dropdown-item"><a href="http://www.youtube.com" target="_blank">Action 1 -
                                Youtube</a></li>
                        <li class="dropdown-item dropdown">
                            <a class="dropdown-toggle" id="dropdown1-1" data-toggle="dropdown" aria-haspopup="true"
                                aria-expanded="false">Dropdown1.1</a>
                            <ul class="dropdown-menu" aria-labelledby="dropdown1-1">
                                <li class="dropdown-item"><a href="#">Action 1.1</a></li>
                                <li class="dropdown-item dropdown">
                                    <a class="dropdown-toggle" id="dropdown1-1-1" data-toggle="dropdown"
                                        aria-haspopup="true" aria-expanded="false">Dropdown1.1.1</a>
                                    <ul class="dropdown-menu" aria-labelledby="dropdown1-1-1">
                                        <li class="dropdown-item"><a target="_blank" href="http://www.google.com">Action
                                                1.1.1 -
                                                Google</a></li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" id="dropdown2" data-toggle="dropdown" aria-haspopup="true"
                        aria-expanded="false">Dropdown2</a>
                    <ul class="dropdown-menu" aria-labelledby="dropdown2">
                        <li class="dropdown-item"><a href="#">Action 2 A</a></li>
                        <li class="dropdown-item"><a href="#">Action 2 B</a></li>
                        <li class="dropdown-item"><a href="#">Action 2 C</a></li>
                        <li class="dropdown-item dropdown">
                            <a class="dropdown-toggle" id="dropdown2-1" data-toggle="dropdown" aria-haspopup="true"
                                aria-expanded="false">Dropdown2.1</a>
                            <ul class="dropdown-menu" aria-labelledby="dropdown2-1">
                                <li class="dropdown-item"><a href="#">Action 2.1 A</a></li>
                                <li class="dropdown-item"><a href="#">Action 2.1 B</a></li>
                                <li class="dropdown-item"><a href="#">Action 2.1 C</a></li>
                                <li class="dropdown-item dropdown">
                                    <a class="dropdown-toggle" id="dropdown2-1-1" data-toggle="dropdown"
                                        aria-haspopup="true" aria-expanded="false">Dropdown2.1.1</a>
                                    <ul class="dropdown-menu" aria-labelledby="dropdown2-1-1">
                                        <li class="dropdown-item"><a href="#">Action 2.1.1 A</a></li>
                                        <li class="dropdown-item"><a href="#">Action 2.1.1 B</a></li>
                                        <li class="dropdown-item"><a href="#">Action 2.1.1 C</a></li>
                                    </ul>
                                </li>
                                <li class="dropdown-item dropdown">
                                    <a class="dropdown-toggle" id="dropdown2-1-2" data-toggle="dropdown"
                                        aria-haspopup="true" aria-expanded="false">Dropdown2.1.2</a>
                                    <ul class="dropdown-menu" aria-labelledby="dropdown2-1-2">
                                        <li class="dropdown-item"><a href="#">Action 2.1.2 A</a></li>
                                        <li class="dropdown-item"><a href="#">Action 2.1.2 B</a></li>
                                        <li class="dropdown-item"><a href="#">Action 2.1.2 C</a></li>
                                    </ul>
                                </li>
                            </ul>
                        </li>
                    </ul>
                </li>
            </ul>
            <form class="form-inline mt-2 mt-md-0" style="margin-right: 20px;">
                <input class="form-control mr-sm-2" type="text" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
            </form>
            <button id="signout_button" style="display: none;" class="btn btn-danger">Sign Out</button>
        </div>
    </div>
    <div style="margin: 15px">
        <div class="d-flex">
            <h3 class="mr-auto">Buckets</h3>
            <button id="create_bucket_action" class="btn btn-primary" style="display: none;">Create a new
                bucket</button>
        </div>
        <p style="font-size: 20px;" id="sign_in_note">To Transfer your data to Filecoin Network, you
            need to first connect to your google account</p>

        <button id="authorize_button" style="display: none;"><img src="images/sign-in-with-google.jpeg"></button>

        <div id="bucketsDiv"></div>

        <button id="picker_button" style="display: none; margin-top: 10px;" class="btn btn-primary">Transfer files from
            Google Drive to
            this Bucket</button>
        <br>
        <div id="listDirectoriesDiv" style="margin-top: 50px;"></div>

        <div style="margin-left: 200px;" id="functions_call_div">

            <!-- pick files from google drive button -->
            <div id="fileTransferDiv">
                <div id="selectedItems" style="margin-top: 50px; margin-bottom: 10px;"></div>
                <button id="transfer_button" style="display: none;" class="btn btn-success">Transfer Files</button>
                <strong>
                    <div id="file_transfer_status" style="display: none;"></div>
                </strong>
            </div>

            <!-- create a new bucket button -->
            <div id="createBucketDiv">
                <div style="width: 300px; margin-bottom: 10px;">
                    <input type="text" id="new_bucket_name" placeholder="New Bucket Name" style="display: none;">
                </div>
                <button id="create_bucket" style="display: none;" class="btn btn-success">Create Bucket</button>

                <strong>
                    <div id="bucket_create_status" style="display: none;"></div>
                </strong>
            </div>
        </div>
    </div>


    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script type="text/javascript">
        // Client ID and API key from the Developer Console
        var CLIENT_ID = '661879573898-06hnq7gdfe2vbtd0huk0ui7qjgs050gs.apps.googleusercontent.com';
        var API_KEY = 'AIzaSyDxe3SDEXfrG1Wm491vyCtcC3ed_cmHGWA';

        // Array of API discovery doc URLs for APIs used by the quickstart
        var DISCOVERY_DOCS = ["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"];

        // required for pickerAPI
        var appId = "661879573898";

        var pickerApiLoaded = false;
        var oauthToken;

        var developerKey = 'AIzaSyDxe3SDEXfrG1Wm491vyCtcC3ed_cmHGWA'
        // Authorization scopes required by the API; multiple scopes can be
        // included, separated by spaces.
        var SCOPES = 'https://www.googleapis.com/auth/drive.metadata.readonly https://www.googleapis.com/auth/drive https://www.googleapis.com/auth/drive.file https://www.googleapis.com/auth/drive.appdata https://www.googleapis.com/auth/drive.metadata https://www.googleapis.com/auth/drive.metadata.readonly https://www.googleapis.com/auth/drive.photos.readonly https://www.googleapis.com/auth/drive.readonly';

        var authorizeButton = document.getElementById('authorize_button');
        var signoutButton = document.getElementById('signout_button');
        var pickerButton = document.getElementById('picker_button');
        var createBucketActionButton = document.getElementById('create_bucket_action');
        var transferButton = document.getElementById('transfer_button');
        var createBucketButton = document.getElementById('create_bucket')
        var signInNote = document.getElementById('sign_in_note');
        // var bucketNameInput = document.getElementById('bucket_name');
        var fileTransferStatusDiv = document.getElementById('file_transfer_status');

        var currentBucket = '';
        function loadPicker() {
            // gapi.load('auth', { 'callback': onAuthApiLoad });
            gapi.load('picker', { 'callback': onPickerApiLoad });
        }

        function onPickerApiLoad() {
            pickerApiLoaded = true;
            createPicker();
        }

        // Create and render a Picker object for searching images.
        function createPicker() {
            // when first time login, the oauthToken is generally undefined, hence added this code
            if (!oauthToken) {
                oauthToken = gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token
            }

            if (pickerApiLoaded && oauthToken) {
                var view = new google.picker.View(google.picker.ViewId.DOCS);
                view.setMimeTypes("image/png,image/jpeg,image/jpg");
                var picker = new google.picker.PickerBuilder()
                    .enableFeature(google.picker.Feature.NAV_HIDDEN)
                    .enableFeature(google.picker.Feature.MULTISELECT_ENABLED)
                    .setAppId(appId)
                    .setOAuthToken(oauthToken)
                    .addView(view)
                    .addView(new google.picker.DocsUploadView())
                    .setDeveloperKey(developerKey)
                    .setCallback(pickerCallback)
                    .build();
                picker.setVisible(true);
            }
        }

        let fileIdArray = [];
        // A simple callback implementation.
        function pickerCallback(data) {
            if (data.action == google.picker.Action.PICKED) {
                var fileId;
                for (var i = 0; i < data.docs.length; i++) {
                    fileId = fileIdArray.push(data.docs[i].id);
                }
                // var fileId = data.docs[0].id;
                document.getElementById('selectedItems').style.display = 'block';
                document.getElementById('selectedItems').innerHTML = '<b>Files selected => </b>' + fileIdArray;
                // bucketNameInput.style.display = 'block';
                transferButton.style.display = 'block';
                fileTransferStatusDiv.style.display = 'block';
                // alert('The user selected: ' + fileIdArray);
            }
        }

        /**
         *  On load, called to load the auth2 library and API client library.
         */
        function handleClientLoad() {
            gapi.load('client:auth2', initClient);
        }

        /**
         *  Initializes the API client library and sets up sign-in state
         *  listeners.
         */
        function initClient() {
            gapi.client.init({
                apiKey: API_KEY,
                clientId: CLIENT_ID,
                discoveryDocs: DISCOVERY_DOCS,
                scope: SCOPES
            }).then(function () {
                // Listen for sign-in state changes.
                gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);

                // Handle the initial sign-in state.
                updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
                authorizeButton.onclick = handleAuthClick;
                signoutButton.onclick = handleSignoutClick;
                pickerButton.onclick = handlePickerClick;
                createBucketActionButton.onclick = handleCreateBucketUI;
                transferButton.onclick = transferFilesToSpaceDaemon;
                createBucketButton.onclick = createBucket;
                // bucketNameInput.value = '';
                oauthToken = gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token;
            }, function (error) {
                appendPre(JSON.stringify(error, null, 2));
            });
        }

        /**
         *  Called when the signed in status changes, to update the UI
         *  appropriately. After a sign-in, the API is called.
         */
        function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
                authorizeButton.style.display = 'none';
                signInNote.style.display = 'none';

                signoutButton.style.display = 'block';
                // pickerButton.style.display = 'inline-block';
                // transferButton.style.display = 'block';
                // bucketNameInput.style.display = 'block';
                fileTransferStatusDiv.style.display = 'block';
                createBucketActionButton.style.display = 'block';
                document.getElementById('bucketsDiv').style.display = 'block';
                listFiles();
                showBuckets();
            } else {
                authorizeButton.style.display = 'block';
                signInNote.style.display = 'block';

                signoutButton.style.display = 'none';
                pickerButton.style.display = 'none';
                transferButton.style.display = 'none';
                // bucketNameInput.style.display = 'none';
                fileTransferStatusDiv.style.display = 'none';

                createBucketActionButton.style.display = 'none';
                createBucketButton.style.display = 'none';
                document.getElementById('new_bucket_name').style.display = 'none';
                document.getElementById('bucket_create_status').style.display = 'none';

            }
        }

        /**
         *  Sign in the user upon button click.
         */
        function handleAuthClick(event) {
            gapi.auth2.getAuthInstance().signIn();
        }

        /**
         *  Sign out the user upon button click.
         */
        function handleSignoutClick(event) {
            // deletePreContent();
            document.getElementById('selectedItems').innerHTML = '';
            document.getElementById('listDirectoriesDiv').innerHTML = '';
            fileIdArray = [];
            document.getElementById('createBucketDiv').style.display = 'none';
            document.getElementById('fileTransferDiv').style.display = 'none';
            document.getElementById('bucketsDiv').innerHTML = '';
            document.getElementById('bucketsDiv').style.display = 'none';

            gapi.auth2.getAuthInstance().signOut();
        }

        function handlePickerClick(event) {
            document.getElementById('create_bucket').style.display = 'none';
            document.getElementById('new_bucket_name').style.display = 'none';
            document.getElementById('bucket_create_status').style.display = 'none';

            document.getElementById('selectedItems').innerHTML = '';
            document.getElementById('file_transfer_status').innerHTML = '';
            document.getElementById('fileTransferDiv').style.display = 'block';
            fileIdArray = [];
            loadPicker();
        }

        function handleCreateBucketUI(event) {
            document.getElementById('selectedItems').style.display = 'none';
            // document.getElementById('bucket_name').style.display = 'none';
            document.getElementById('transfer_button').style.display = 'none';
            document.getElementById('file_transfer_status').style.display = 'none';
            document.getElementById('listDirectoriesDiv').innerHTML = '';
            document.getElementById('listDirectoriesDiv').style.display = 'none';
            document.getElementById('fileTransferDiv').style.display = 'block';
            pickerButton.style.display = 'none';

            if (currentBucket != '') {
                document.getElementById(currentBucket).style.backgroundColor = "#ffcc99";
                document.getElementById(currentBucket).style.color = "#000";
            }
            currentBucket = '';

            document.getElementById('createBucketDiv').style.display = 'block';
            document.getElementById('create_bucket').style.display = 'block';
            document.getElementById('new_bucket_name').style.display = 'block';
            document.getElementById('bucket_create_status').style.display = 'block';
            document.getElementById('bucket_create_status').innerHTML = '';

            document.getElementById('new_bucket_name').value = '';

        }
        /**
         * Append a pre element to the body containing the given message
         * as its text node. Used to display the results of the API call.
         *
         * @param {string} message Text to be placed in pre element.
         */
        // uncomment the below function statements to display the list of the files
        function appendPre(message) {
            // var pre = document.getElementById('content');
            // var textContent = document.createTextNode(message + '\n');
            // pre.appendChild(textContent);
        }

        function deletePreContent() {
            var pre = document.getElementById('content');
            pre.innerHTML = '';
        }

        async function transferFilesToSpaceDaemon(event) {
            // fileIdArray;
            console.log('enteredFilesTo space daemon function')
            // var bucketName = document.getElementById("bucket_name").value;
            var bucketName = currentBucket;
            console.log('bucketname entered is: ', bucketName);
            var accessToken = await gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token;// or this: gapi.auth.getToken().access_token;
            var xhr = [];
            var xhr2 = [];
            for (var index = 0; index < fileIdArray.length; index++) {
                function xhrcall(index, fileIdArray, accessToken) {
                    var fileId = fileIdArray[index];
                    xhr[index] = new XMLHttpRequest();
                    xhr[index].open("GET", "https://www.googleapis.com/drive/v3/files/" + fileId + '?alt=media', true);
                    xhr[index].setRequestHeader('Authorization', 'Bearer ' + accessToken);
                    xhr[index].responseType = 'arraybuffer'
                    xhr[index].onload = function () {
                        //base64ArrayBuffer from https://gist.github.com/jonleighton/958841
                        var base64 = 'data:image/png;base64,' + base64ArrayBuffer(xhr[index].response);

                        xhr2[index] = new XMLHttpRequest();
                        var url = 'http://localhost:3000/transfer/' + fileId + '/' + bucketName;
                        var params = 'base64=' + encodeURI(base64);
                        xhr2[index].open('POST', url, true);

                        //Send the proper header information along with the request
                        xhr2[index].setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

                        xhr2[index].onreadystatechange = function () {//Call a function when the state changes.
                            if (xhr2[index].readyState == 4 && xhr2[index].status == 200) {
                                console.log('image transfer status: ', xhr2[index].responseText);
                                document.getElementById('file_transfer_status').innerHTML = 'Files Transferred to Space Daemon';
                                setTimeout(timeoutFunc, 1000);
                                function timeoutFunc() {
                                    document.getElementById('file_transfer_status').innerHTML = '';
                                    clickBucket('refresh');
                                }
                            }
                        }
                        xhr2[index].send(params);
                    }
                    xhr[index].send();
                };
                xhrcall(index, fileIdArray, accessToken);
            }
        }

        function createBucket(event) {
            var xhr = new XMLHttpRequest();
            var bucketName = document.getElementById('new_bucket_name').value;
            var url = 'http://localhost:3000/createFolder/' + bucketName;
            xhr.open('POST', url, true);

            //Send the proper header information along with the request
            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

            xhr.onreadystatechange = function () {//Call a function when the state changes.
                if (xhr.readyState == 4 && xhr.status == 200) {
                    console.log('bucket created: ', xhr.responseText);
                    document.getElementById('bucket_create_status').innerHTML = 'New Bucket Created';
                    setTimeout(reloadPage, 1000);
                    function reloadPage() {
                        location.reload();
                    }
                }
            }
            xhr.send();
        }

        function base64ArrayBuffer(arrayBuffer) {
            var base64 = ''
            var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

            var bytes = new Uint8Array(arrayBuffer)
            var byteLength = bytes.byteLength
            var byteRemainder = byteLength % 3
            var mainLength = byteLength - byteRemainder

            var a, b, c, d
            var chunk

            // Main loop deals with bytes in chunks of 3
            for (var i = 0; i < mainLength; i = i + 3) {
                // Combine the three bytes into a single integer
                chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]

                // Use bitmasks to extract 6-bit segments from the triplet
                a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18
                b = (chunk & 258048) >> 12 // 258048   = (2^6 - 1) << 12
                c = (chunk & 4032) >> 6 // 4032     = (2^6 - 1) << 6
                d = chunk & 63               // 63       = 2^6 - 1

                // Convert the raw binary segments to the appropriate ASCII encoding
                base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]
            }

            // Deal with the remaining bytes and padding
            if (byteRemainder == 1) {
                chunk = bytes[mainLength]

                a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2

                // Set the 4 least significant bits to zero
                b = (chunk & 3) << 4 // 3   = 2^2 - 1

                base64 += encodings[a] + encodings[b] + '=='
            } else if (byteRemainder == 2) {
                chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]

                a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10
                b = (chunk & 1008) >> 4 // 1008  = (2^6 - 1) << 4

                // Set the 2 least significant bits to zero
                c = (chunk & 15) << 2 // 15    = 2^4 - 1

                base64 += encodings[a] + encodings[b] + encodings[c] + '='
            }

            return base64
        }

        // show all buckets in the bucketsDiv
        function showBuckets() {
            var xhr = new XMLHttpRequest();
            var url = 'http://localhost:3000/listBuckets';
            xhr.open('GET', url, true);

            //Send the proper header information along with the request
            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

            xhr.onreadystatechange = function () {//Call a function when the state changes.
                if (xhr.readyState == 4 && xhr.status == 200) {
                    console.log('list of buckets: ', xhr.responseText);
                    var responseText = JSON.parse(xhr.responseText);
                    for (var i = 0; i < responseText.length; i++) {
                        var div = document.createElement("div");
                        div.style.display = "inline-block";
                        div.style.backgroundColor = "#ffcc99";
                        div.style.border = "1px black solid round";
                        div.style.borderRadius = "20px";
                        div.style.padding = "30px"
                        div.style.margin = "5px"
                        div.innerHTML = responseText[i];
                        div.id = responseText[i];
                        div.class = "bucket_class";
                        div.style.cursor = "pointer";
                        div.onclick = clickBucket;
                        document.getElementById("bucketsDiv").appendChild(div);
                    }
                }
            }
            xhr.send();
        }

        function clickBucket(action) {
            document.getElementById('createBucketDiv').style.display = 'none';
            document.getElementById('fileTransferDiv').style.display = 'none';
            if (currentBucket != '') {
                document.getElementById(currentBucket).style.backgroundColor = "#ffcc99";
                document.getElementById(currentBucket).style.color = "#000";
            }
            if (action != 'refresh') {
                currentBucket = this.innerHTML;
            } // else its the same bucket

            document.getElementById(currentBucket).style.backgroundColor = "#333";
            document.getElementById(currentBucket).style.color = "#fff";
            document.getElementById('listDirectoriesDiv').style.display = 'block';

            pickerButton.style.display = 'inline-block';

            var xhr = new XMLHttpRequest();
            var url = 'http://localhost:3000/listBucketDirectories/' + currentBucket;
            xhr.open('GET', url, true);

            //Send the proper header information along with the request
            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

            xhr.onreadystatechange = function () {//Call a function when the state changes.
                if (xhr.readyState == 4 && xhr.status == 200) {
                    var response = JSON.parse(xhr.responseText);
                    document.getElementById('listDirectoriesDiv').innerHTML = '<h3>Bucket Content</h3>';
                    for (var i = 0; i < response.length; i++) {
                        document.getElementById('listDirectoriesDiv').innerHTML += response[i] + '<br>';
                    }

                }
            }
            xhr.send();
        }

        /**
         * Print files.
         */
        function listFiles() {
            gapi.client.drive.files.list({
                'pageSize': 5,
                'fields': "nextPageToken, files(id, name)"
            }).then(function (response) {
                appendPre('Files:');
                var files = response.result.files;
                if (files && files.length > 0) {
                    for (var i = 0; i < files.length; i++) {
                        var file = files[i];
                        appendPre(file.name + ' (' + file.id + ')');
                    }
                    let fileId = '1qvkLVJjVYXloRY6TrEbTyKjGwScxyIdr';
                    var accessToken = gapi.auth2.getAuthInstance().currentUser.get().getAuthResponse().access_token;// or this: gapi.auth.getToken().access_token;
                    var xhr = new XMLHttpRequest();
                    xhr.open("GET", "https://www.googleapis.com/drive/v3/files/" + fileId + '?alt=media', true);
                    xhr.setRequestHeader('Authorization', 'Bearer ' + accessToken);
                    xhr.responseType = 'arraybuffer'
                    xhr.onload = function () {
                        //base64ArrayBuffer from https://gist.github.com/jonleighton/958841
                        var base64 = 'data:image/png;base64,' + base64ArrayBuffer(xhr.response);

                        var xhr2 = new XMLHttpRequest();
                        var url = 'http://localhost:3000/transfer/'
                        var params = 'base64=' + encodeURI(base64);
                        xhr2.open('POST', url, true);

                        //Send the proper header information along with the request
                        xhr2.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

                        xhr2.onreadystatechange = function () {//Call a function when the state changes.
                            if (xhr2.readyState == 4 && xhr2.status == 200) {
                            }
                        }
                        xhr2.send(params);

                        //do something with the base64 image here
                        // var imageToDownload = document.createElement("a");
                        // imageToDownload.href = base64;
                        // imageToDownload.download = "Image.png";
                        // imageToDownload.click();
                    }
                    // xhr.send();
                } else {
                    appendPre('No files found.');
                }
            });
        }
    </script>

    <script async defer src="https://apis.google.com/js/api.js" onload="this.onload=function(){};handleClientLoad()"
        onreadystatechange="if (this.readyState === 'complete') this.onload()"></script>

</body>

</html>